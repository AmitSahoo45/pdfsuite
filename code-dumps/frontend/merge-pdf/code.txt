    // const generatePreview = async (file: File): Promise<string> => {
    //     try {
    //         const pdfjsLib = await import('pdfjs-dist');

    //         if (typeof window !== 'undefined' && !pdfjsLib.GlobalWorkerOptions.workerSrc) {
    //             // pdfjsLib.GlobalWorkerOptions.workerSrc = `/pdf.worker.mjs`;

    //             // --- CDN version --- TESTING - IMP
    //             // https://cdn.jsdelivr.net/npm/pdfjs-dist@5.1.91/+esm
    //             const pdfjsVersion = '5.2.133';
    //             pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdn.jsdelivr.net/npm/pdfjs-dist@${pdfjsVersion}/build/pdf.worker.min.mjs`;
    //         }

    //         const arrayBuffer = await file.arrayBuffer();
    //         const pdfDoc = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    //         const page = await pdfDoc.getPage(1);

    //         const desiredWidth = 140;
    //         const viewport = page.getViewport({ scale: 1 });
    //         const scale = desiredWidth / viewport.width;
    //         const scaledViewport = page.getViewport({ scale });

    //         const canvas = document.createElement('canvas');
    //         const context = canvas.getContext('2d');
    //         if (!context) throw new Error('Could not get canvas context');

    //         canvas.height = scaledViewport.height;
    //         canvas.width = scaledViewport.width;

    //         const renderContext = {
    //             canvasContext: context,
    //             viewport: scaledViewport,
    //         };
    //         await page.render(renderContext).promise;

    //         pdfDoc.destroy();

    //         return canvas.toDataURL('image/png');
    //     } catch (error) {
    //         console.error(`Error generating preview for ${file.name}:`, error);
    //         return '/assets/placeholder-preview.svg';
    //     }
    // };

Additional func for mergePDF fnc. 
Might implement later

    const mergePdfs = useCallback(async () => {
        if (pdfFiles.length < 2) {
            toast.error('You need at least two PDF files to merge.');
            return;
        }
        setIsLoading(true);
        setMergedPdfUrl(null);
        try {
            const { PDFDocument, degrees } = await import('pdf-lib');
            const merged = await PDFDocument.create();

            for (const f of pdfFiles) {
                const bytes = await f.file.arrayBuffer();
                const doc = await PDFDocument.load(bytes, { ignoreEncryption: true });
                const pages = await merged.copyPages(doc, doc.getPageIndices());
                pages.forEach(page => {
                    if (f.rotation) page.setRotation(degrees(f.rotation));
                    merged.addPage(page);
                });
            }

            const mergedBytes = await merged.save();
            const blob = new Blob([mergedBytes], { type: 'application/pdf' });
            const url = URL.createObjectURL(blob);
            setMergedPdfUrl(url);
            toast.success('Merge completed!');
        } catch (err) {
            console.error(err);
            toast.error('Error merging PDFs.');
        } finally {
            setIsLoading(false);
        }
    }, [pdfFiles]);


Old conversion logic
    const onDrop = useCallback(async (acceptedFiles: File[]) => {
        setIsGeneratingPreviews(true);
        const newFilesPromises = acceptedFiles.map(async (file) => {
            try {
                const pdfLibDoc = await PDFDocument.load(await file.arrayBuffer());
                const pageCount = pdfLibDoc.getPageCount();
                const previewUrl = await generatePreview(file);

                return {
                    id: uuid(),
                    file,
                    name: file.name,
                    size: file.size,
                    pages: pageCount,
                    rotation: 0,
                    previewImageUrl: previewUrl,
                } as FileMeta;
            } catch (error) {
                console.error(`Failed to process file ${file.name}:`, error);
                alert(`Failed to process file ${file.name}. It might be corrupted or password-protected.`);
                return null;
            }
        });

        const newFiles = (await Promise.all(newFilesPromises)).filter(f => f !== null) as FileMeta[];

        setPdfFiles((prev) => {
            const combined = [...prev, ...newFiles];
            if (combined.length > MAX_FILES) {
                alert(`You can only upload up to ${MAX_FILES} files in total.`);
                return prev; // Or slice: combined.slice(0, MAX_FILES) - imp - review required
            }
            return combined;
        });
        setIsGeneratingPreviews(false);
    }, []); // Remove pdfFiles from dependency array - it can cause unnecessary runs. Check if needed. - imp - removed (review required)